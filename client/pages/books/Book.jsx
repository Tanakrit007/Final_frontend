import React, { useEffect, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";

const Book = () => {
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    title: "",
    author: "",
    category: "",
    publishYear: "",
    isbn: "",
  });
  const [editingId, setEditingId] = useState(null);

  useEffect(() => {
    fetchBooks();
  }, []);

  const fetchBooks = async () => {
  try {
    const res = await axios.get("https://bookshop-api-er7t.onrender.com/api/books");
    console.log("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API:", res.data);

    // ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array
    if (Array.isArray(res.data)) {
      setBooks(res.data);
    } else if (res.data && Array.isArray(res.data.data)) {
      setBooks(res.data.data);
    } else {
      console.warn("‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á array:", res.data);
      setBooks([]);
    }
  } catch (err) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
  } finally {
    setLoading(false);
  }
};


  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    if (editingId) {
      await axios.put(`https://bookshop-api-er7t.onrender.com/api/books/${editingId}`, formData);
      Swal.fire("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
    } else {
      const res = await axios.post("https://bookshop-api-er7t.onrender.com/api/books", formData);
      console.log("üì§ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API:", res.data);
      Swal.fire("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
    }
    setFormData({ title: "", author: "", category: "", publishYear: "", isbn: "" });
    setEditingId(null);
    fetchBooks();
  } catch (err) {
    console.error("‚ùå API error:", err.response ? err.response.data : err);
    Swal.fire("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
  }
};


  const handleEdit = (book) => {
    setEditingId(book.itemId);
    setFormData({
      title: book.title,
      author: book.author,
      category: book.category,
      publishYear: book.publishYear,
      isbn: book.isbn,
    });
  };

  const handleDelete = async (id) => {
    const confirm = await Swal.fire({
      title: "‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      text: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (confirm.isConfirmed) {
      try {
        await axios.delete(`https://bookshop-api-er7t.onrender.com/api/books/${id}`);
        Swal.fire("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß!", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
        fetchBooks();
      } catch (err) {
        Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">
        {editingId ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà"}
      </h1>

      <form onSubmit={handleSubmit} className="grid grid-cols-2 gap-4 bg-gray-50 p-4 rounded-lg mb-6">
        <input type="text" name="title" value={formData.title} onChange={handleChange} placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" className="input input-bordered" />
        <input type="text" name="author" value={formData.author} onChange={handleChange} placeholder="‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á" className="input input-bordered" />
        <input type="text" name="category" value={formData.category} onChange={handleChange} placeholder="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" className="input input-bordered" />
        <input type="number" name="publishYear" value={formData.publishYear} onChange={handleChange} placeholder="‡∏õ‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå" className="input input-bordered" />
        <input type="text" name="isbn" value={formData.isbn} onChange={handleChange} placeholder="ISBN" className="input input-bordered" />
        <button type="submit" className="btn btn-primary col-span-2">
          üíæ {editingId ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
        </button>
      </form>

      <h2 className="text-xl font-semibold mb-2">üìö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
      <div className="overflow-x-auto">
        <table className="table w-full">
          <thead>
            <tr>
              <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</th>
              <th>‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á</th>
              <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {books.map((book) => (
              <tr key={book.itemId}>
                <td>{book.title}</td>
                <td>{book.author}</td>
                <td>{book.category}</td>
                <td>{book.status}</td>
                <td className="flex gap-2">
                  <button onClick={() => handleEdit(book)} className="btn btn-sm btn-outline btn-info">
                    ‚úèÔ∏è
                  </button>
                  <button onClick={() => handleDelete(book.itemId)} className="btn btn-sm btn-outline btn-error">
                    üóëÔ∏è
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Book;
