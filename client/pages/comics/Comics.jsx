import React, { useEffect, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";

const Comics = () => {
  const [comics, setComics] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingId, setEditingId] = useState(null);

  const [formData, setFormData] = useState({
    title: "",
    author: "",
    category: "",
    publishYear: "",
    isbn: "",
    series: "",
    volumeNumber: "",
    illustrator: "",
    colorType: "",
    targetAge: "",
    description: "",
  });

  useEffect(() => {
    fetchComics();
  }, []);

  const fetchComics = async () => {
    try {
      const res = await axios.get("https://bookshop-api-er7t.onrender.com/api/comics");
      console.log("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API:", res.data);

      if (Array.isArray(res.data)) {
        setComics(res.data);
      } else if (res.data && Array.isArray(res.data.data)) {
        setComics(res.data.data);
      } else {
        console.warn("‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á array:", res.data);
        setComics([]);
      }
    } catch (err) {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    if (
      !formData.title ||
      !formData.author ||
      !formData.category ||
      !formData.publishYear ||
      !formData.isbn ||
      !formData.series ||
      !formData.volumeNumber ||
      !formData.illustrator ||
      !formData.colorType ||
      !formData.targetAge ||
      !formData.description
    ) {
      Swal.fire("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á", "warning");
      return;
    }

    const payload = {
      ...formData,
      publishYear: Number(formData.publishYear),
      volumeNumber: Number(formData.volumeNumber),
    };

    try {
      if (editingId) {
        await axios.put(`https://bookshop-api-er7t.onrender.com/api/comics/${editingId}`, payload);
        Swal.fire("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
      } else {
        await axios.post("https://bookshop-api-er7t.onrender.com/api/comics", payload);
        Swal.fire("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
      }

      setFormData({
        title: "",
        author: "",
        category: "",
        publishYear: "",
        isbn: "",
        series: "",
        volumeNumber: "",
        illustrator: "",
        colorType: "",
        targetAge: "",
        description: "",
      });
      setEditingId(null);
      fetchComics();
    } catch (err) {
      console.error("‚ùå API Error:", err.response?.data || err);
      Swal.fire("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err.response?.data?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
    }
  };

  const handleEdit = (comic) => {
    setEditingId(comic.itemId);
    setFormData({
      title: comic.title,
      author: comic.author,
      category: comic.category,
      publishYear: comic.publishYear,
      isbn: comic.isbn,
      series: comic.series,
      volumeNumber: comic.volumeNumber,
      illustrator: comic.illustrator,
      colorType: comic.colorType,
      targetAge: comic.targetAge,
      description: comic.description,
    });
  };

  const handleDelete = async (id) => {
    const confirm = await Swal.fire({
      title: "‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      text: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (confirm.isConfirmed) {
      try {
        await axios.delete(`https://bookshop-api-er7t.onrender.com/api/comics/${id}`);
        Swal.fire("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß!", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
        fetchComics();
      } catch (err) {
        Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">
        {editingId ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô‡πÉ‡∏´‡∏°‡πà"}
      </h1>

      <form onSubmit={handleSubmit} className="grid grid-cols-2 gap-4 bg-gray-50 p-4 rounded-lg mb-6">
        <input type="text" name="title" value={formData.title} onChange={handleChange} placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" className="input input-bordered" />
        <input type="text" name="author" value={formData.author} onChange={handleChange} placeholder="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô" className="input input-bordered" />
        <input type="text" name="category" value={formData.category} onChange={handleChange} placeholder="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" className="input input-bordered" />
        <input type="number" name="publishYear" value={formData.publishYear} onChange={handleChange} placeholder="‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà" className="input input-bordered" />
        <input type="text" name="isbn" value={formData.isbn} onChange={handleChange} placeholder="ISBN" className="input input-bordered" />
        <input type="text" name="series" value={formData.series} onChange={handleChange} placeholder="Series" className="input input-bordered" />
        <input type="number" name="volumeNumber" value={formData.volumeNumber} onChange={handleChange} placeholder="Volume Number" className="input input-bordered" />
        <input type="text" name="illustrator" value={formData.illustrator} onChange={handleChange} placeholder="‡∏ô‡∏±‡∏Å‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û" className="input input-bordered" />
        <input type="text" name="colorType" value={formData.colorType} onChange={handleChange} placeholder="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏µ (FULL_COLOR/BLACK_WHITE)" className="input input-bordered" />
        <input type="text" name="targetAge" value={formData.targetAge} onChange={handleChange} placeholder="‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢" className="input input-bordered" />
        <textarea name="description" value={formData.description} onChange={handleChange} placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" className="textarea textarea-bordered col-span-2" />
        <button type="submit" className="btn btn-primary col-span-2">
          üíæ {editingId ? "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
        </button>
      </form>

      <h2 className="text-xl font-semibold mb-2">üìö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
      <div className="overflow-x-auto">
        <table className="table w-full">
          <thead>
            <tr>
              <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</th>
              <th>‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô</th>
              <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
              <th>‡∏õ‡∏µ</th>
              <th>ISBN</th>
              <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {comics.map((comic) => (
              <tr key={comic.itemId}>
                <td>{comic.title}</td>
                <td>{comic.author}</td>
                <td>{comic.category}</td>
                <td>{comic.publishYear}</td>
                <td>{comic.isbn}</td>
                <td className="flex gap-2">
                  <button onClick={() => handleEdit(comic)} className="btn btn-sm btn-outline btn-info">‚úèÔ∏è</button>
                  <button onClick={() => handleDelete(comic.itemId)} className="btn btn-sm btn-outline btn-error">üóëÔ∏è</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Comics;
